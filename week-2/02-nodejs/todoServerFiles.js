/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs').promises;
const { v4: uuidv4 } = require('uuid');

const app = express();

app.use(bodyParser.json());

const filePath = 'todos.json';

async function readTodosFromFile() {
    try {
        const data = await fs.readFile(filePath, 'utf-8');
        return JSON.parse(data);
    } catch (error) {
        throw error;
    }
}

async function writeTodosToFile(todos) {
    try {
        await fs.writeFile(filePath, JSON.stringify(todos));
    } catch (error) {
        throw error;
    }
}

app.post('/todos', async (req, res, next) => {
    try {
        const newTodo = {
            id: uuidv4(),
            title: req.body.title,
            description: req.body.description
        };
        const todos = await readTodosFromFile();

        todos.push(newTodo);

        await writeTodosToFile(todos);

        res.status(201).json(newTodo);
    } catch (error) {
        console.error(error);
        res.status(500).json({ "error": "Something went wrong at our side" });
    }
});

app.get('/todos', async (req, res, next) => {
    const todos = await readTodosFromFile();
    if (todos) {
        res.status(200).json(todos);
    } else {
        res.status(404).json({
            "error": "todos not found",
            "status": "404"
        })
    }

});

app.get('/todos/:id', async (req, res, next) => {
    const id = req.params.id;
    const todos = await readTodosFromFile();
    const response = todos.filter((todo) => todo.id === id)[0];
    if (response) {
        res.status(200).json(response);
    } else {
        res.status(404).json({
            "error": "todo not found",
            "status": "404"
        })
    }
})

app.delete('/todos/:id', async (req, res, next) => {
    const id = req.params.id;
    let todos = await readTodosFromFile();
    const todo = todos.filter((todo) => todo.id === id)[0];

    if (!todo) {
        res.status(404).send(`Todo not found with given id ${id}`);
        return;
    }
    let newTodos = todos.filter(
        (todo) => todo.id !== id
    );

    await writeTodosToFile(JSON.stringify(newTodos));
    res.status(204).send(`Todo with id : ${id} is deleted successfully`);

})

app.put('/todos/:id', async (req, res, next) => {
    const id = req.params.id;
    const todos = await readTodosFromFile();
    const todo = todos.filter((todo) => todo.id === id)[0];
    if (!todo) {
        res.status(404).send(`Todo not found with given id ${id}`);
        return;
    }
    let index = 0;
    for (let i = 0; i < todos.length; i++) {
        if (todo === todos[i]) {
            index = i;
            break;
        }
    }
    const updatedTodo = {
        id: todos[todoIndex].id,
        title: req.body.title,
        description: req.body.description
    };

    todos[todoIndex] = updatedTodo;

    let updatedTodos = await writeTodosToFile(updatedTodo);

    res.status(202).json(updatedTodos[todoIndex]);
});

app.all('*', (req, res, next) => {
    res.status(404).send('Route not found');
});

app.listen(3000, () => {
    console.log('App is running at port 3000');
});